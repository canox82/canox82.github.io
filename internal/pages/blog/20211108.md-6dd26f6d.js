import{S as Ra,i as qa,s as xa,B as ka,j as Aa,m as Na,o as ja,p as La,q as Pa,x as $a,u as Oa,v as Ja,L as Sa,e as i,t as e,k as q,c as p,a as k,g as o,n as x,d as u,b as m,f as A,D as a,E as Ha}from"../../chunks/vendor-e07562cf.js";import Ia from"./layoutBlog.svelte-66f535dc.js";function Ma(y){let t,f,h,v,l,d,P,L,g,$,O,J,H,I,M,b,C,D,G,U,S,T,X,F,w,K,N,_,Ba=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> fetch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./blog.json</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> posts <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> lastPost <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> lastPost <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">let</span> lastPost<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span>@html lastPost<span class="token punctuation">.</span>html<span class="token punctuation">&#125;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,j,n,Q,V,W,Y,Z,aa,ta,B,sa,na,z,ea,oa,ia,pa,la,ca,E,ra,ua,R,ma,da;return{c(){t=i("p"),f=e("Oh adesso iniziamo ad esserci!"),h=i("br"),v=q(),l=i("br"),d=e(`
Partiamo dalla index, la prima pagina.`),P=i("br"),L=e(`
Inizialmente avevo un JSON che ricavava dai post i vari Metadata e lo SLUG, ma non mi permetteva di ottenere direttamente il corpo del markdown. Ho quindi cercato su internet, reddit e forum vari finch\xE8 non mi sono imbattuto sulla richiesta di Riccardo (anche lui ha creato un sito in Svelte, `),g=i("a"),$=e("pressappoco.it"),O=e(" dateci un occhio) quindi ho utilizzato la stessa soluzione proposta, modificandola secondo le mie esigenze."),J=i("br"),H=q(),I=i("br"),M=e(`
La parte di creazione/modifica del JSON la trovate `),b=i("a"),C=e("qui"),D=e(", non mi resta che parlarvi di come l\u2019ho implementata a mio uso."),G=i("br"),U=e(`
Nel mio caso specifico mi occorre l\u2019ultimo post; ho richiamato tutti i post con un fetch al JSON e ricavato l\u2019ultimo post dall\u2019array dei post con `),S=i("span"),T=e(".at(-1)"),X=i("br"),F=e(`
Successivamente mi \xE8 bastato renderizzarlo con `),w=i("span"),K=e("@html"),N=q(),_=i("pre"),j=q(),n=i("p"),Q=e("\xA0"),V=i("br"),W=e(`
In questo modo il blog \xE8 semi automatizzato e si evitano inutili e fastidiosi errori, molto bene.`),Y=i("br"),Z=q(),aa=i("br"),ta=e(`
Per quanto riguarda la `),B=i("span"),sa=e("favicon"),na=e(" o meglio il prototipo di essa, ho utilizzato "),z=i("a"),ea=e("Affinity Photo"),oa=e(". E\u2019 da un po\u2019 di tempo che utilizzo i prodotti di Affinity e mi ci trovo molto bene, ho abbandonato Adobe convertendomi completamente al loro metodo e ne sono entusiasta."),ia=i("br"),pa=q(),la=i("br"),ca=e(`
La `),E=i("span"),ra=e("favicon"),ua=e(" \xE8 molto semplice, una C con un 82 messo in diagonale, sono caratteri alfanumerici che mi appartegono da sempre e che utilizzo come nickname spesso, qui li ho solo utilizzati in modalit\xE0 "),R=i("span"),ma=e("\u201Ccodice fiscale\u201D"),da=e(" se mi passate il termine."),this.h()},l(r){t=p(r,"P",{});var s=k(t);f=o(s,"Oh adesso iniziamo ad esserci!"),h=p(s,"BR",{}),v=x(s),l=p(s,"BR",{}),d=o(s,`
Partiamo dalla index, la prima pagina.`),P=p(s,"BR",{}),L=o(s,`
Inizialmente avevo un JSON che ricavava dai post i vari Metadata e lo SLUG, ma non mi permetteva di ottenere direttamente il corpo del markdown. Ho quindi cercato su internet, reddit e forum vari finch\xE8 non mi sono imbattuto sulla richiesta di Riccardo (anche lui ha creato un sito in Svelte, `),g=p(s,"A",{href:!0,target:!0});var fa=k(g);$=o(fa,"pressappoco.it"),fa.forEach(u),O=o(s," dateci un occhio) quindi ho utilizzato la stessa soluzione proposta, modificandola secondo le mie esigenze."),J=p(s,"BR",{}),H=x(s),I=p(s,"BR",{}),M=o(s,`
La parte di creazione/modifica del JSON la trovate `),b=p(s,"A",{href:!0,target:!0});var ha=k(b);C=o(ha,"qui"),ha.forEach(u),D=o(s,", non mi resta che parlarvi di come l\u2019ho implementata a mio uso."),G=p(s,"BR",{}),U=o(s,`
Nel mio caso specifico mi occorre l\u2019ultimo post; ho richiamato tutti i post con un fetch al JSON e ricavato l\u2019ultimo post dall\u2019array dei post con `),S=p(s,"SPAN",{class:!0});var va=k(S);T=o(va,".at(-1)"),va.forEach(u),X=p(s,"BR",{}),F=o(s,`
Successivamente mi \xE8 bastato renderizzarlo con `),w=p(s,"SPAN",{class:!0});var ga=k(w);K=o(ga,"@html"),ga.forEach(u),s.forEach(u),N=x(r),_=p(r,"PRE",{class:!0});var Ea=k(_);Ea.forEach(u),j=x(r),n=p(r,"P",{});var c=k(n);Q=o(c,"\xA0"),V=p(c,"BR",{}),W=o(c,`
In questo modo il blog \xE8 semi automatizzato e si evitano inutili e fastidiosi errori, molto bene.`),Y=p(c,"BR",{}),Z=x(c),aa=p(c,"BR",{}),ta=o(c,`
Per quanto riguarda la `),B=p(c,"SPAN",{class:!0});var ba=k(B);sa=o(ba,"favicon"),ba.forEach(u),na=o(c," o meglio il prototipo di essa, ho utilizzato "),z=p(c,"A",{href:!0,target:!0});var _a=k(z);ea=o(_a,"Affinity Photo"),_a.forEach(u),oa=o(c,". E\u2019 da un po\u2019 di tempo che utilizzo i prodotti di Affinity e mi ci trovo molto bene, ho abbandonato Adobe convertendomi completamente al loro metodo e ne sono entusiasta."),ia=p(c,"BR",{}),pa=x(c),la=p(c,"BR",{}),ca=o(c,`
La `),E=p(c,"SPAN",{class:!0});var za=k(E);ra=o(za,"favicon"),za.forEach(u),ua=o(c," \xE8 molto semplice, una C con un 82 messo in diagonale, sono caratteri alfanumerici che mi appartegono da sempre e che utilizzo come nickname spesso, qui li ho solo utilizzati in modalit\xE0 "),R=p(c,"SPAN",{class:!0});var ya=k(R);ma=o(ya,"\u201Ccodice fiscale\u201D"),ya.forEach(u),da=o(c," se mi passate il termine."),c.forEach(u),this.h()},h(){m(g,"href","https://pressappoco.it"),m(g,"target","_blank"),m(b,"href","https://github.com/pngwn/MDsveX/issues/294"),m(b,"target","_blank"),m(S,"class","italic font-bold"),m(w,"class","italic font-bold"),m(_,"class","language-svelte"),m(B,"class","italic"),m(z,"href","https://affinity.serif.com/it/photo/"),m(z,"target","_blank"),m(E,"class","italic"),m(R,"class","italic")},m(r,s){A(r,t,s),a(t,f),a(t,h),a(t,v),a(t,l),a(t,d),a(t,P),a(t,L),a(t,g),a(g,$),a(t,O),a(t,J),a(t,H),a(t,I),a(t,M),a(t,b),a(b,C),a(t,D),a(t,G),a(t,U),a(t,S),a(S,T),a(t,X),a(t,F),a(t,w),a(w,K),A(r,N,s),A(r,_,s),_.innerHTML=Ba,A(r,j,s),A(r,n,s),a(n,Q),a(n,V),a(n,W),a(n,Y),a(n,Z),a(n,aa),a(n,ta),a(n,B),a(B,sa),a(n,na),a(n,z),a(z,ea),a(n,oa),a(n,ia),a(n,pa),a(n,la),a(n,ca),a(n,E),a(E,ra),a(n,ua),a(n,R),a(R,ma),a(n,da)},p:Ha,d(r){r&&u(t),r&&u(N),r&&u(_),r&&u(j),r&&u(n)}}}function Ca(y){let t,f;const h=[y[0],wa];let v={$$slots:{default:[Ma]},$$scope:{ctx:y}};for(let l=0;l<h.length;l+=1)v=ka(v,h[l]);return t=new Ia({props:v}),{c(){Aa(t.$$.fragment)},l(l){Na(t.$$.fragment,l)},m(l,d){ja(t,l,d),f=!0},p(l,[d]){const P=d&1?La(h,[d&1&&Pa(l[0]),d&0&&Pa(wa)]):{};d&2&&(P.$$scope={dirty:d,ctx:l}),t.$set(P)},i(l){f||($a(t.$$.fragment,l),f=!0)},o(l){Oa(t.$$.fragment,l),f=!1},d(l){Ja(t,l)}}}const wa={layout:"blog",title:"Prima pagina dinamica e favicon",date:"2021/11/08 16:00",tags:["blog","sveltejs","grafica"],pre:" Ho messo a posto la prima pagina e creato la favicon!"};function Da(y,t,f){return y.$$set=h=>{f(0,t=ka(ka({},t),Sa(h)))},t=Sa(t),[t]}class Ta extends Ra{constructor(t){super();qa(this,t,Da,Ca,xa,{})}}export{Ta as default,wa as metadata};
